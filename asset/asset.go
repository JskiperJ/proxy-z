// Code generated by go-bindata. DO NOT EDIT.
// sources:
// Resources/pem/cert.pem
// Resources/pem/key.pem
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesPemCertPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x49\xeb\xab\x4c\x1a\xc5\xf7\x7e\x8a\xde\x4b\x63\x1c\x12\xe3\xa2\x17\x55\x5a\xce\xf3\x10\x87\x5d\xd4\xa4\x1c\x63\x8c\x63\xfc\xf4\xcd\xff\x5e\x1a\x1a\xba\xdf\x97\x5b\x50\x9b\xaa\xe7\x39\xf0\xe3\x70\xe0\xfc\xf3\xe7\x40\xa4\x68\xf6\x3f\x44\xe4\x87\x9a\xac\x89\x20\x44\xbf\x5e\x09\x4b\xd3\x14\xb1\x11\x45\x40\x19\x18\x6c\x1a\x04\x58\x13\x21\x99\x6e\x92\x97\xea\xc6\x90\x69\xd5\x5a\xd8\xc0\x43\x26\xf4\xc0\x86\x53\xb0\x8b\x07\xd0\x21\xb6\x6f\x10\xa4\x21\xe8\x6e\x21\x61\x79\xed\x06\xb7\x54\xba\x79\x9e\x86\x36\xb0\xcb\x0d\x88\x7e\x0f\x14\xa1\x74\xb3\xab\xbc\x86\x4a\xd1\xcb\x4b\xca\x74\x47\xca\x5c\x77\xe5\x00\xd9\xef\xff\x36\x44\x6d\xb9\x12\xb9\xe2\x77\x79\x0d\xd5\x34\xf1\x3b\x0d\xe9\xdf\x7b\xec\xbf\xb2\x10\x39\x16\xd8\x14\x40\x47\x08\xf9\x96\xec\x84\xde\x66\x85\xe9\xae\x85\xe0\xf9\x7b\x79\x08\x15\xc5\x62\x1d\xc5\xfb\x12\x76\xaf\xb7\x56\x8f\x18\x8f\x11\xe6\x42\x91\x97\x47\xb0\xe1\x20\x3a\x4b\x66\x03\xb0\xbc\x9d\xbe\x56\x83\xbe\xd6\x01\x36\xbb\x89\x38\x2b\xac\xee\x0a\xb8\x7e\xad\x50\xfb\xb9\x87\x25\x01\x86\xb0\x43\xbc\x3b\xf2\xf0\x7f\xf9\xfe\x04\x8f\xf8\x3b\xbe\x3f\xc1\x23\xfe\x8e\xef\xaf\xf1\x44\x11\xd4\xda\x2f\xa7\x88\xff\xb2\x0a\x42\x0f\x48\x18\x6b\x2e\x90\x44\x11\xe0\x41\xc4\x58\x83\xc0\xf6\x94\xbd\x88\x7d\x3e\x64\x95\xa2\x74\xe5\xa5\x39\xb1\xd6\x4b\x70\x3c\xd2\x95\x5f\xb7\xf4\x4c\xdc\xb0\x3c\x69\xe3\x62\x08\x9a\xad\xd1\xc7\xf1\xf4\x6f\xfd\x65\x63\x79\x8d\x36\xae\x06\xdb\xed\xae\x7d\x71\x24\x26\x99\xcb\x42\xf1\x55\x57\x64\x58\xfc\x91\xa8\x68\xb9\x66\x5e\xb6\x49\xad\xf0\x78\x13\x8b\x54\x6c\xf1\x09\x88\x39\x75\xc8\xbc\x5c\x3f\xdb\xd9\x0a\xc0\x39\x70\x1a\x37\x4a\xdc\x29\x1d\xc3\x3c\x72\xeb\x56\x61\x8b\xe2\x4c\xdf\xa9\xda\x29\x13\x2f\x2a\x15\x9d\x7f\xee\xce\x43\x31\x92\x8a\x50\xe9\xb8\x0e\xe5\xc8\x0c\xa9\xd1\xc6\xa6\x5e\x52\x43\x18\x5e\x8c\x7a\x79\xa7\xf1\x07\x5f\x6f\xa1\xc9\x92\x28\x12\x5e\x93\x80\x7d\x47\xdd\x8c\x8f\x05\xa5\x80\x29\x1b\xf2\x11\x72\x59\x1a\x8c\x5f\xc2\xf2\x8b\xe8\xc1\xbb\xac\x4a\xcf\x88\x9f\xa5\xc5\x36\x4a\x21\xaf\x1b\x07\x9f\xba\xe5\x71\xe6\xda\x61\xb8\xf5\x39\xf0\x87\x8c\x55\xa3\x7b\xff\x32\xda\x7a\x6f\xa7\x32\xb4\xc7\x7e\x14\x3e\x36\x23\x12\x31\xa7\x84\xee\x40\x69\x54\x46\x71\x64\x72\xd8\xaa\x40\x7f\xab\xa0\x3c\xcc\x5d\xe6\xe1\xbb\xcb\x7a\xfd\x0b\x6a\x73\xa5\x96\x45\x33\x58\x3d\x58\x75\x36\x1c\x39\x3d\xdd\x13\x3d\x27\x2f\x9d\xfc\x22\xbc\x46\x32\x65\x39\x4b\x74\xa3\x85\xeb\x97\xdf\x87\x40\xdb\xc2\x00\xbe\x1d\xbf\xbe\xc0\xea\x9a\x66\x72\xde\xbc\x53\xef\x39\xa9\x0c\xe9\xf4\xca\x55\xdf\x1a\x52\xf7\x36\x04\x80\x78\x2d\xab\xd9\x24\xee\x57\xba\x7e\xb9\xfd\xe0\xd3\x63\x5d\xbb\xbb\x9c\x2f\x07\x5c\xbd\xf1\x23\x3f\xe3\x2f\x4c\x73\x45\x45\x7b\xf1\xe4\xdd\x7e\x39\x7f\x6d\x7a\x78\xd2\x6b\x61\x2a\x0f\xeb\xd4\x72\xb8\xaa\x86\xb7\x77\x10\xcc\xfc\xd5\xf9\x55\xf5\xc5\x23\x67\xb4\x78\xd5\x46\x0a\x97\xb9\x95\x9f\x84\xd7\x9c\xb1\xb5\x24\xcc\x0e\xe2\x85\x7e\x58\x20\x1e\x18\x80\xdb\x15\x17\xb3\xb9\x9c\xdf\x13\x67\x9d\xfd\x26\x66\x22\x02\xd0\x6e\x43\xcd\xd5\xec\x0e\x79\x14\xad\xab\xa9\xc7\xcb\xa7\x4d\xa4\x4b\x69\xa0\x94\xb6\x1f\x1e\xf2\x94\x5b\xed\xb7\xa3\xfb\xb1\x6f\x87\xc9\x3a\x63\x66\x2f\x56\x51\x8a\x20\xb8\x9a\xa9\x0b\x5e\x44\x9c\x2d\x8f\x31\xa1\xd9\x6e\x3d\xaa\x34\xa8\x66\xe7\x7a\x3b\xed\x87\x29\x96\xe6\xe7\x1c\x91\x5f\x1a\x89\xf9\xf1\x5a\xd6\x29\xf7\xc5\xc6\xd1\x27\xc3\x25\xf9\x47\xb7\x6a\x2d\xdb\xaa\x83\x37\xf8\x06\xa1\xd4\x3d\x29\x90\xbd\x44\x6a\x32\x05\xb0\x05\x01\x50\x1a\x9c\xb6\x1b\x4e\xd3\x4d\xc2\xa9\x74\xf3\x4f\x2e\xf0\x54\x0a\x02\x4f\x02\xd8\x68\x2d\x78\xfa\x09\x52\xa9\x7b\x5e\x6c\x41\x4f\x21\x44\x71\x52\x80\x17\xc9\x70\xb3\x20\xc4\xf8\x03\x31\x92\xa1\x57\x48\xa0\x01\xee\x4f\xb8\x54\xdf\x82\xe0\x79\x45\x30\x04\xd2\x8f\xd0\x7f\x04\x24\xec\xc5\x10\x86\x09\x01\x58\x16\xc9\x42\x5d\x9b\xb6\x49\xef\x07\x0a\x21\x1f\xdc\xb9\xef\xd2\xb0\x21\xe8\x7e\x0b\x20\xa4\x36\xa0\xc0\xb8\x9b\x72\xc6\xae\x72\xa5\x5a\x0b\x36\x10\xa5\x03\x7d\xed\x2f\xb7\x11\x66\x03\x16\x2b\x1c\x68\x3b\xf4\x4e\xd6\x01\x6c\x88\xdb\xb1\x6a\x6b\x45\xd8\x4e\x10\x78\x93\x0c\x80\x23\x02\x8c\xc0\x3d\xe7\xe0\x9e\x73\x61\xce\xdb\xcb\xf4\x96\xea\x22\x55\x9e\x0f\xe9\x43\x11\xa8\x38\x9d\xc5\x56\x5d\xa1\xb1\xb7\x19\x26\xbb\xdc\xa1\x0a\xa0\x66\x41\x70\x1e\x77\x66\x09\x55\x3d\xa0\x91\x7a\xbe\x3e\xa2\x4b\xa5\xaa\x9c\xcc\xaf\xe5\x06\x4b\x71\xad\x4c\x64\x02\x51\xd1\x77\x62\x92\x74\x65\x6f\xc3\x48\x9b\x7c\xeb\xf5\xa8\x4d\x76\xb5\xd2\xfb\xfd\xae\xf6\x79\x70\x39\xf9\x0b\x7e\x19\xf1\xd0\xb0\xdc\x47\xdd\xf8\x1e\xd9\xe0\xda\xdb\xa8\x0e\x0a\x3a\xae\x6a\x81\x9e\x48\x9d\x21\x22\x72\x57\xe3\x2a\xe2\x3e\xdc\x5c\x2b\x56\xec\x5c\x4f\x5c\xe0\x8d\x36\x10\x04\x39\x73\xc3\x4b\x68\x0b\xa3\x72\xb3\x3d\x27\xc8\x1b\xf2\xee\x5f\xe3\xbb\x7d\x0c\xa8\x8a\xbc\x90\xad\xe9\x12\xcd\x31\xc1\xdf\xd2\xdd\x3d\x75\x93\x48\x4f\x82\xd8\x5c\x25\x72\x7f\x4d\x6e\xd0\x31\xdd\xc7\xae\x9e\x9e\x62\x91\x14\xbd\x5f\x38\xf8\xee\x22\x78\x8d\xb6\xb2\xd7\xcf\x4e\x3f\x73\xda\xdc\x03\xc3\x7d\x41\xb6\x25\x94\x8f\xf0\xe0\x3f\x09\x5c\x38\xf4\xdd\xfc\xe0\x99\xa9\x95\x44\xe9\x4d\x76\xa7\xc2\x85\xee\x6b\x43\x2e\xce\xb1\xa1\x25\x79\xf5\xbe\xa6\x82\xca\xed\x97\xb3\x30\x31\xe4\x47\xa7\x6f\x02\x63\xb1\xf9\x87\x88\xe9\xcc\xe5\xf4\xa3\xf3\x8e\xc9\x34\x4a\x1e\x14\x58\xa9\x13\xe3\xb0\xe5\xcb\xcb\x6e\xf2\x86\x7f\xeb\xd1\xfd\xf6\x22\xd7\x1b\xb5\x98\xf2\x24\x2e\x97\x79\x66\xc6\xcf\x69\xdb\xa2\x31\x78\x0b\xfb\x8d\xf0\x24\x3c\xfb\x31\xeb\x33\x9f\xa4\xc5\x11\x49\xee\x94\x14\xf0\x2d\xc7\x5b\x7a\x3e\xbc\x68\x34\x1e\x0b\xb4\x63\x67\x33\xbf\x9c\x4a\x61\x9c\x3a\xcf\x81\xc3\xf9\xc4\x06\x71\x52\x58\xb6\xa9\xbe\x89\x3b\x3a\x33\xba\xd9\xda\x66\x63\x04\xca\xd2\x4d\xe4\xf7\x3d\xaa\x69\xb0\x3c\xa7\xe7\x47\x3d\x37\x5c\x78\x7a\x4e\x67\xf7\xa2\xaf\x69\x34\xf2\xd7\x63\x2a\x72\xe4\x9d\x9e\xef\x0e\x37\xb7\x31\xd9\xe2\x84\xb0\xa5\xc9\x08\x03\xb3\x80\x66\x6d\xd6\xa2\x6a\x5a\xa2\x1f\xeb\x99\xa6\x98\x99\x79\xc0\xd3\x29\x5a\x23\x6c\x17\xba\xed\x4a\xea\x9d\x4c\xa4\x3c\x13\xe2\xb2\xca\x68\x39\x6f\x18\x54\xbe\xe9\xa6\x21\x34\x9d\x6b\xca\x0f\xcb\x27\x34\x2f\x82\xc9\x9b\xc9\xeb\x6d\x3e\x50\xd6\x26\xc5\x63\xe9\x12\xd8\x08\xcf\x4d\xe1\xd5\xa4\x4f\x6f\xc7\x4a\x0d\xc7\xa4\x86\xdd\x42\xc9\x88\xe3\xdd\xf8\x68\x8a\x5c\x26\x96\x58\xc8\xdf\xf9\xb7\x29\x55\xc9\x39\x29\xe9\xd7\xe2\xd0\xbf\x88\x5f\xd5\x01\xd9\xd2\xff\xd6\x89\x7f\x07\x00\x00\xff\xff\x9e\x0d\xf0\xf2\x6b\x08\x00\x00")

func resourcesPemCertPemBytes() ([]byte, error) {
	return bindataRead(
		_resourcesPemCertPem,
		"Resources/pem/cert.pem",
	)
}

func resourcesPemCertPem() (*asset, error) {
	bytes, err := resourcesPemCertPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/pem/cert.pem", size: 2155, mode: os.FileMode(384), modTime: time.Unix(1672383498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesPemKeyPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x97\xb5\x12\xa4\x0c\xa3\x05\x73\x9e\x62\x73\xea\x16\x3a\x48\x88\xbb\x3b\x19\x2e\x83\x0c\x2e\x4f\x7f\x6b\xb7\xbe\xf0\x3f\xe9\xc9\xba\x3a\xe9\xff\xfb\x3b\x56\x90\x14\xf3\x8f\xeb\x31\x7f\x6c\x57\x09\x19\x5f\xf8\xa3\x09\xc9\xbf\x07\x30\x14\x45\xd5\x1c\x85\x65\x18\x8d\x63\x1a\x81\x41\x98\x5c\xbc\x53\x79\xb7\x8b\xf4\x86\xa9\x88\xb0\xfd\xe2\xa9\xe1\x0f\x8f\x53\x51\x19\xf6\x43\xc4\x44\x57\xb7\xe0\x2b\xdc\xc0\x7d\x6c\x9b\xb4\x08\x44\xf9\xca\xd7\x5b\x1f\xac\xd7\x5a\xc5\x02\x85\xcd\xb8\x9d\x56\x08\x72\xa5\x42\x41\xe9\x79\xc5\x6d\x36\xed\x91\xf7\xc0\x4e\x8c\xe5\x23\xc4\x88\x9b\x2f\x9b\x3b\x8c\x7a\x42\x46\xbc\x45\x2a\xe8\x01\xf0\xad\xf0\x83\x42\x18\xb4\x5b\x80\x77\xf7\x33\x77\x07\xd4\x9c\xbc\xbc\xdf\x29\x5c\x41\xe5\x83\x94\xac\x0b\x27\xd3\x0e\x09\x1f\x3c\xf9\x55\x42\x1d\x66\xaa\x11\x3a\xbb\x0d\xce\x28\xb3\x0d\x18\x08\xb4\xa6\x3d\x2f\x1a\x31\xb4\xd9\xc1\xdf\xa1\x71\xd6\xb8\xeb\xa3\xd5\x8b\xb2\x02\x5e\x33\xcb\x76\x09\xa6\x9e\xa2\xf6\xe7\x63\xb7\x43\xab\xad\xca\x2d\xde\x2e\xb9\x41\x45\x1d\xc1\xfe\x01\x5b\x38\x0c\xfc\x30\xe4\xd0\x0c\x82\xf7\xa2\x0f\x39\x75\x5e\xd7\x46\xe9\xc6\x4a\xed\x54\x94\xee\x92\x15\x8b\xa7\x4b\xde\x8d\x18\xe8\x92\xad\xe8\x86\x25\x6a\xde\xa4\x06\xd8\x53\x3d\x3d\x41\xfd\xa7\x36\xe0\x1a\xc0\x62\x4d\x54\x31\xe3\x14\xe2\x4d\x1a\xc3\x31\x99\x14\x4e\x39\x20\x90\xc0\x9b\xb5\x18\x34\x6a\x2a\xad\xb5\x19\x7a\xb1\x18\x4e\x72\x09\xa2\x92\x33\x8c\x2d\x08\x87\xe2\xbb\x38\x12\xa4\x9f\x52\x0b\x28\x3d\x6b\x2a\xd2\xf7\x23\xe9\xb3\x24\xdf\xed\x37\x3c\xac\xa1\x65\xc1\xab\xce\x71\x22\xc9\xaf\x89\xb3\xf1\x81\x67\x1c\x86\xd1\x6f\x54\x82\xf7\xf5\x8d\xb4\x02\xcc\x5a\x39\x5a\x34\x05\x12\xc2\x03\x20\x0d\x89\xe6\x96\x2d\xa4\x73\x45\x6c\xb7\xa4\xf0\xc5\x1b\xda\xc0\x8c\x9c\x14\x2c\x6a\xa1\x88\xbe\xb6\x14\x7f\x3d\xbf\xe3\x24\xa9\x1b\x78\x3b\xc3\x94\xe9\xa0\x4a\x41\x37\xcf\xa4\xcd\xa8\x6e\x05\x40\x16\xd9\xee\xd3\x47\x2b\x64\xaa\x14\x1b\x85\x71\xff\x44\xb3\x0e\x97\xb8\x3e\xe1\x38\x0f\x64\x1f\xf8\x20\xc7\xf1\x6d\xde\x41\x32\xf3\xd4\xe1\x03\xd0\x06\x51\x09\x06\xdb\xdd\xf5\x40\x6a\x1b\x80\x8c\x38\xdc\xc2\xfe\xc1\xb3\xdb\x07\xc8\x87\x71\x99\x34\x52\x25\x6f\x06\x37\x24\x36\xce\x82\xf8\x7d\x51\xfc\xbe\x61\x85\xd5\xaf\xbd\xa1\xb8\x32\x1d\x3f\xc4\xaf\x8e\xab\x08\xb2\xc4\x56\x93\x60\x12\xb8\x63\x5f\x36\x36\x15\x3e\xce\xc1\x27\xf5\xc0\x51\x4f\xab\x22\xc0\x7b\x17\x34\x03\x1f\xaf\x19\x22\x77\x22\xa2\x3a\xbf\x72\xaa\x96\x6b\x85\x39\xd3\x72\x12\x23\x12\x1b\x6f\x62\x8a\x63\x2e\x81\x01\x18\xe7\xaf\xc2\x2c\x57\xee\xb0\x12\xd4\xa9\xf1\x7b\x3a\xb9\xea\x9d\xa9\x96\x92\x84\xe9\x79\x91\xae\x9e\x22\xda\xdf\x5c\x0c\x56\x05\xc4\x93\x65\x8e\xd6\x38\xeb\x12\xdf\x5a\x3b\xf3\xae\xf2\x01\x00\x05\x85\xd2\xd3\x2f\x9f\xb9\x12\x8f\xce\x59\x43\xe8\x16\x3c\xbb\x4a\x44\xd4\x7a\xd8\x98\xa1\x13\x6c\xa4\xd8\x73\x9f\x57\x9e\x42\x2a\x82\x0b\x68\x2f\x8e\x06\x92\x7c\xcd\x4d\xf7\x74\x1f\xe2\x0f\x50\xcf\xd0\xc9\xef\xb6\xa9\x0f\xf2\x7c\xd3\xdd\x20\x13\xd3\x87\xd1\x68\x87\x66\x3b\xf9\x5e\x48\xdb\xc4\x19\xae\xa6\x40\xef\x51\xd0\x41\x7a\x32\x4c\xe5\xdc\xf7\x4e\x4c\x7e\xe6\x66\x6b\x5f\xb9\x0d\x28\x87\x2a\x71\xc8\xbd\x86\xca\x5d\x37\xfd\xf7\x37\xa9\x56\xc1\xcc\x98\x75\x08\xb3\x0b\x92\x96\xc4\x80\xc4\xbd\x11\xf3\x09\xd7\x27\xa2\x7f\xd5\x51\xaa\x63\x9e\xb3\x7a\x7c\x64\xbf\x97\x91\xdc\x28\x60\x49\x97\xfc\x39\x1d\x3d\x0e\x20\x48\xc8\xf7\x7c\xc3\x96\x59\xbf\x9b\x3e\x18\x91\xad\x63\xae\x9e\x28\x25\x69\xfa\x65\xce\x4d\x57\xc1\xf1\xbc\x92\xe5\xc4\x54\x14\xf2\x3d\xfa\x55\xfb\x08\x6b\x06\xe0\x5a\x36\xeb\x03\x17\xe7\xc3\x6e\x01\x4c\x47\x6c\x3b\x26\xb5\x59\xf4\xf3\x94\xb7\xca\x33\xd1\xf1\x4b\x7e\xbe\x33\x7a\x27\xa9\xf1\x76\x0f\xab\x89\x93\x73\xb1\x1c\x15\x33\x50\xc5\xb2\xa8\xff\x5e\x00\x25\xb6\xeb\xd4\xaa\x08\x61\x47\x3d\x75\xf9\x4e\xdc\x58\xeb\x6b\x30\xd7\xfa\x5d\x12\x65\x49\x86\x2f\x06\x71\xe8\x0e\x63\x4d\x86\xf4\xc6\x18\xe7\x0f\x71\xdd\x72\xf0\x39\xe3\x8e\xa6\x24\x73\x1b\x80\x6e\x34\x4a\xb3\x46\x89\x6e\x1b\xbd\xf3\x0c\x70\x24\x36\x86\x65\x46\xd4\xf5\x60\x48\xbd\xed\x64\x3f\x0d\x4a\x15\x3e\x79\x17\x06\xf3\x0a\xef\x26\xb4\x5e\x35\x95\x36\x6a\x7d\xe4\x03\x88\x0f\x2b\x60\xb2\xb9\xfb\xe1\xeb\xa6\x53\xba\x36\x61\x6a\x6d\x81\xb3\x75\x01\x15\xd9\x4e\xef\x67\xef\xe1\x85\x3f\x46\xd0\xe4\xc1\x22\xdd\x92\x35\xe2\xde\x50\x7e\x46\x1a\xca\x7c\x3b\xf3\x69\xd5\x8e\xf6\x04\xb8\xd7\x5c\x52\xa7\xc1\x2b\xd7\x9d\xf7\x4e\x62\xb8\xae\x83\xb2\x71\x1c\x41\x0e\xbf\xdd\xda\x01\x61\x5b\xee\x5b\x65\x8c\x45\x5b\x83\xff\x44\x7e\x9f\xfe\x84\x40\xbe\x71\xb1\x1c\x13\xbb\x12\x11\x16\x28\x21\x53\xea\x35\xee\xe0\xa6\xb6\x37\x42\xb0\x00\x21\x63\xf1\x3c\xce\xa0\x13\xa4\xa7\x70\x69\x2e\x3f\x1c\x54\xa5\xb3\x4f\xca\x7b\x7a\x62\x2c\xfe\xcf\x5c\x47\x60\x30\xdc\x1c\x59\xd2\x54\x81\x9f\xb3\xcd\xfe\xd6\xb5\xc2\x5e\x67\xf6\xb0\xaf\x0a\x77\xc0\x7d\xf4\x61\x8f\x05\x5a\x7b\x08\xfb\x0e\xe5\xac\x63\x5f\x31\x8d\xbb\x42\xc5\x1d\x9e\x4e\x5f\xf5\x5c\x44\x94\x9e\xd0\x84\x46\x94\xee\x01\x66\x59\xb7\x51\x51\x65\x96\x26\x2c\xdf\x4b\xdf\x82\x51\x36\x29\xc7\xd0\xc6\x20\x7a\x14\x98\xec\xcd\x9b\x97\xbd\x6e\x5e\x18\x18\x4a\x62\xb1\x97\xf6\xae\x52\x5b\x9e\x58\x21\xcd\x83\xb6\x35\x1a\x01\x9c\xe6\xae\x80\x30\x4c\x2c\x9e\x2d\xca\x80\x05\xd4\xe4\x7e\xb5\x62\x0d\x20\xe4\x1b\xaf\x7a\x41\x59\x4f\x38\x0e\xb5\xb1\xe8\x0a\x63\xb8\x69\xab\xc5\x6a\x48\x89\x0a\x23\xb0\xc7\x73\x72\x50\x22\xc0\x11\xdd\x44\x5b\x1c\x22\xeb\xec\x0f\xa4\xc8\xab\xf0\xb4\xb9\x8c\xa5\xc7\xf9\x48\xa6\xbb\xe6\xee\xd2\x0a\xe8\x11\x40\x95\xf2\x29\x4b\xf0\x0a\xa2\xdc\x4d\x3d\x99\x00\x41\xbd\x47\x56\xc4\x61\x42\x20\xfb\xd9\xdf\xe1\x6e\xd2\xc4\x0c\x7f\x43\x5f\xf8\x7c\x43\x24\xda\x10\x21\x75\xaa\xe2\xde\x0e\x8e\x49\x1e\xad\x4b\xcb\x04\x0e\xd1\x8c\x6b\x17\x20\x47\xaf\xc8\x2e\xa2\xd5\x53\x7d\x04\x5f\xdc\x30\x01\xbb\x4e\xf9\xca\xc0\x53\x12\xf1\x87\xef\x7f\x84\xa9\xbd\xc6\x22\xf4\xc9\x57\xb9\x25\x65\x0b\x65\xe9\xdb\xc0\x0a\x27\x6f\xd9\xcf\xca\x74\x9c\x89\xd4\x55\x31\xc1\x6a\x43\xcc\x26\x11\x00\xc5\x51\x25\x7e\xcf\x44\x04\xe2\x76\x1d\x4f\x1a\x23\x53\xfb\x0c\x62\x12\x59\xec\xc1\x9f\x34\x5b\x99\x0b\x9d\xf8\xe0\xda\x7f\x38\xb8\xa9\x0a\x97\x62\x18\x31\xdb\x91\x21\x55\xcb\x4a\x80\x46\xd1\x00\xd5\x26\xb5\xbb\xcb\xbf\x84\xb7\xd6\xe0\x33\xcd\x57\xbb\x30\x6b\x3d\x36\x07\xe2\x57\xa6\x34\xf7\x10\xed\x35\xf0\xb8\x91\xed\xe1\x1a\x90\xc0\x31\xe8\xe0\x33\xb2\x61\x5f\xad\xb0\x0b\x7d\xd7\xbe\x80\x53\x1a\x33\x6c\x14\x31\xae\x94\xca\x1a\x9f\xb4\x9a\x73\x8a\x83\xa2\x4c\x1d\x45\x70\x1d\x90\xe5\xaa\x7f\x03\x78\xb3\x66\x98\xae\x5b\xdd\x98\x8a\x4e\xdf\x3f\x9f\x4e\x99\x94\xa9\x97\x43\x06\x0a\x80\xd9\x19\xe0\x78\x58\xd1\xbc\x9d\xac\x20\x26\x46\xd2\x12\x64\xe8\xbb\xa6\xd4\x1c\x70\x35\x8b\xb7\xf3\x28\x1e\xd3\xdb\x7d\xb7\x0e\x24\x0b\x78\x38\xf2\x5f\x92\x42\x24\x3a\x7e\xde\xea\x78\x2d\xa5\x06\x90\x98\xe7\x21\x62\xac\x7e\xd5\x19\xa7\xd7\xa5\xbc\x38\x24\xf4\x2f\x4b\x82\xa2\xea\xe6\xb8\xd6\xa5\x58\xdd\x0f\x01\x75\xf0\xd7\x5f\xc0\x4c\x21\x0c\xe8\xab\x80\x6a\x43\x3f\xbd\x88\x08\x64\x05\x0c\xf5\x11\xf0\xc8\xc0\x42\xed\x46\x89\x6c\x7d\x3a\x31\x49\x27\x04\x59\x60\x6f\x1f\xc4\xbd\xce\xe9\x58\x0e\x69\x63\xf5\x93\x42\x54\xdb\x4c\x53\x83\x8c\xd0\x35\x9f\xf8\x92\xf7\x3d\x45\x2d\x5d\x00\x4c\xea\xe3\xc7\xaa\x55\x1f\x5e\xbe\x46\x1e\x72\x8d\x2a\xad\x92\xb5\x49\x77\x10\xb9\xce\x4b\xa2\x69\x93\xa2\xf3\x37\x6d\x12\xa8\xa9\x8b\x04\x04\x4b\x1c\x8f\x65\x75\x51\x91\xc4\x39\xfc\xfc\x69\x07\xbe\xad\xfc\xf5\xc7\x43\xc9\x3e\x9e\xf9\x96\x24\x44\xd8\x27\xf9\xac\xf5\x65\xb9\x62\x9c\x0c\xaf\xe4\xbc\x96\x91\x75\xb0\x8c\x96\x0a\x6e\x75\xe9\x6b\x28\x82\x73\x0c\x76\xfd\x58\x94\x55\x1a\xce\x0e\x28\x4e\x4c\xf3\x6b\x53\xd5\x66\x63\x80\xca\xb9\x98\x68\x64\xd2\xb7\x92\x28\x76\x19\x76\x96\x38\x66\xb6\x38\x5c\xf2\xea\x7f\x7f\x41\x8c\x93\xd6\xcc\xbb\xbc\x02\x69\xcf\x4b\x38\xc1\xbd\x99\xc9\x04\x28\xdf\xcc\x1f\x7a\xe1\x2c\xa9\x5a\xda\x22\xc3\xa0\x23\xf3\xeb\x41\x9d\x37\x5c\x91\x9e\x20\x60\xa2\x91\xbb\x4c\x56\x29\xdc\x3f\x13\x8e\xf1\xdd\x8e\xd0\x89\x65\x1b\x77\x4b\xef\x39\xd5\x75\x78\x0a\xac\x50\x7f\x33\xb3\xc2\x32\x0e\x27\x57\xaa\x81\xc8\xa1\x48\x20\xf1\x9e\x0c\x60\x8a\x9f\x07\x58\xbd\x4d\x95\xb3\xe3\xc8\x76\x46\xfa\xb4\xad\x58\x43\xca\x85\x07\xb5\x5e\xa5\xa7\xcb\x68\xb5\x55\x03\xa6\xe4\xf0\x76\x12\x8a\xdc\xaf\x2d\xb6\x25\x90\x7d\xd4\xce\x28\x41\x8d\x92\xbc\xac\x13\x02\x0a\xa2\x46\xae\xa4\x1b\x24\xb1\xf6\x2e\xe6\x49\x5c\x30\xb7\x14\xe0\x90\xa7\xb5\xae\xce\x97\x65\x18\x01\xb4\x74\x3e\x95\x5b\x9d\x9b\xfe\xc5\x43\x75\x1c\x3e\x84\x6a\x82\x4f\xf3\x81\x3e\x36\xf6\x4e\xbf\x68\xaf\x42\xea\xfb\xd2\x56\xef\xf6\x15\xf5\x80\xbf\x29\xb5\x1c\x70\x80\xdc\xc7\xf8\x6d\x7a\xe6\x07\x80\xaf\xd9\xc7\x4c\x3d\xc2\xd3\x24\x84\x08\x5f\xe3\xc2\x25\x09\x13\x17\x4a\x01\x95\x1f\x4c\x78\xb9\xc4\x3d\xb7\x4d\x02\xc7\x01\xa5\x53\xe7\xe7\x3c\xe1\xf6\xc9\xef\xf5\x2b\xc7\x0e\x59\x22\x02\x2f\x02\xdc\xc5\x96\x48\x3b\xce\x04\xc1\xa6\x04\x55\xab\xf0\x35\xd6\x30\x48\xdb\xe5\xb2\xd9\x2d\x39\x25\x64\x54\x07\xa8\xaa\x78\xf5\x35\xb5\x94\xbb\x10\x57\x13\xde\xbf\xc9\x22\xdf\xfe\x51\x60\x38\xa7\x81\x45\x33\xef\xce\x0e\xda\x30\xd0\x58\x6c\xfd\xa9\xa7\xa7\x3a\xf8\x4a\x47\xa3\xbf\x19\x0d\x47\xb7\xff\x01\x8e\x24\x3a\x67\x4c\xe9\x9c\xc6\x21\xef\x9d\x25\x6f\x49\x31\x9b\x0e\x4f\xf1\x81\x0d\xbe\x89\x96\x7f\x0c\xfe\x56\xb8\x52\x21\x4b\xb0\x7b\x67\x70\x91\xa6\x38\x98\x7f\xcc\xcf\x78\xf1\xe4\x88\x9a\xfc\x03\x69\x98\x0d\x61\x89\x44\xa0\xdc\x24\x9c\x7d\x74\x84\x02\xab\x75\xda\x80\x03\x81\xb5\xc8\x87\x31\x6e\x15\x7b\x63\x5f\x63\x80\xc3\x0d\x7b\xfd\xba\x1b\x6d\xc7\x45\x2c\x66\x0f\x39\x08\xd2\x50\x19\x47\x22\x9b\x90\x58\xb3\x0e\x15\xe2\xc7\x07\xb0\xbd\xa6\x09\x44\x80\xba\x7b\x03\x81\xd6\xc2\x56\xa8\x43\x69\x2a\x84\x9e\x3b\xf5\x0a\x32\x09\x19\xb3\xbe\x9b\xd1\x83\x64\x7e\x22\x28\x3f\xb3\x96\xe5\x16\x9c\xf3\xfd\xe6\xba\x03\xa6\x82\x7d\x1d\xbf\xc7\x24\x45\x8d\xa3\x39\x49\x01\x1e\x3b\x4e\xdf\x8c\xa6\xc2\xad\x28\x56\xa1\xe3\x58\xc8\xab\x14\x84\x3c\x11\x9d\x4a\x0b\xee\x6b\x67\x48\x3b\xd5\xb2\xc9\x88\x12\xa4\x7e\x45\x5e\x9f\x2e\x41\x6a\xe2\x75\x3e\xe3\x59\xf2\xb0\xa5\x06\x0e\xd6\x71\xc7\x8f\xdc\xff\x6a\x55\x17\x8d\x95\xcb\xcc\xb0\x60\x37\xd2\x02\xe7\x4f\x6b\x50\x6f\x3a\xb6\xdc\x89\xac\x1d\xe4\xd6\x35\xb1\x10\x49\xda\x94\x23\x54\x5d\xb7\xa3\x16\xa3\x03\xfc\x4b\x0e\xc1\xe4\xff\x77\x8a\xfc\x7f\x00\x00\x00\xff\xff\xb3\x9c\x2d\x32\xab\x0c\x00\x00")

func resourcesPemKeyPemBytes() ([]byte, error) {
	return bindataRead(
		_resourcesPemKeyPem,
		"Resources/pem/key.pem",
	)
}

func resourcesPemKeyPem() (*asset, error) {
	bytes, err := resourcesPemKeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/pem/key.pem", size: 3243, mode: os.FileMode(384), modTime: time.Unix(1672383498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Resources/pem/cert.pem": resourcesPemCertPem,
	"Resources/pem/key.pem": resourcesPemKeyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Resources": &bintree{nil, map[string]*bintree{
		"pem": &bintree{nil, map[string]*bintree{
			"cert.pem": &bintree{resourcesPemCertPem, map[string]*bintree{}},
			"key.pem": &bintree{resourcesPemKeyPem, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

